# ============================================================================
# Build stage - for installing dependencies and compilation
# ============================================================================
FROM python:3.11-slim AS builder

# Build-time environment variables
ENV PYTHONDONTWRITEBYTECODE=1 \
    PYTHONUNBUFFERED=1 \
    PIP_NO_CACHE_DIR=1 \
    PIP_DISABLE_PIP_VERSION_CHECK=1

# Install build dependencies (will be discarded in final stage)
RUN apt-get update && apt-get install -y --no-install-recommends \
    build-essential \
    git \
    curl \
    && rm -rf /var/lib/apt/lists/*

# Create virtual environment to isolate dependencies
RUN python -m venv /opt/venv
ENV PATH="/opt/venv/bin:$PATH"

# Copy requirements and install Python dependencies
COPY service/requirements.txt /tmp/requirements.txt

# Optimize torch installation for CPU-only (much smaller)
RUN pip install --upgrade pip && \
    pip install torch torchvision torchaudio --index-url https://download.pytorch.org/whl/cpu && \
    pip install --no-cache-dir -r /tmp/requirements.txt

# ============================================================================
# Runtime stage - minimal image with only runtime dependencies
# ============================================================================
FROM python:3.11-slim AS runtime

# Runtime environment variables
ENV PYTHONDONTWRITEBYTECODE=1 \
    PYTHONUNBUFFERED=1 \
    TOKENIZERS_PARALLELISM=false \
    PATH="/opt/venv/bin:$PATH"

# Install only minimal runtime dependencies
RUN apt-get update && apt-get install -y --no-install-recommends \
    git \
    && rm -rf /var/lib/apt/lists/* \
    && apt-get clean

# Copy virtual environment from builder stage
COPY --from=builder /opt/venv /opt/venv

# Set working directory
WORKDIR /app

# Copy application source
COPY . /app/strands_agents

# Create non-root user for security
RUN useradd -m -u 10001 appuser && \
    chown -R appuser:appuser /app

# Switch to non-root user
USER appuser

# Runtime configuration
ENV APP_HOST=0.0.0.0 \
    APP_PORT=80 \
    UVICORN_WORKERS=1 \
    LOG_LEVEL=info

EXPOSE 80

# Health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=5s --retries=3 \
    CMD python -c "import requests; requests.get('http://localhost:80/health')" || exit 1

# Start FastAPI app
CMD ["sh", "-c", "uvicorn strands_agents.service.app:app --host ${APP_HOST:-0.0.0.0} --port ${APP_PORT:-80} --workers ${UVICORN_WORKERS:-1} --log-level ${LOG_LEVEL:-info}"]
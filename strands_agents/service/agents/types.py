from __future__ import annotations

from typing import List, Dict, Optional, TypedDict, Any
from pydantic import BaseModel, Field


Profile = Dict[str, Optional[str]]


class KeywordsResult(BaseModel):
    keywords: List[str]


class SearchResult(TypedDict):
    title: str
    snippet: str
    authors: List[str]
    department: str
    tags: List[str]


class PersonContact(TypedDict):
    type: str
    value: str


class SelectedPerson(TypedDict):
    name: str
    department: str
    contact: PersonContact
    languages: List[str]


class IntermediateInfo(BaseModel):
    selected_person: SelectedPerson
    search_summary: List[Dict[str, str]]
    tacit_knowledge: List[Dict[str, str]] = Field(default_factory=list)


class ACEContext(BaseModel):
    """Context generated by ACE agent during execution"""
    timestamp: str
    query: str
    query_length: int
    profile: Dict[str, str]
    keywords: Dict[str, Any]
    search_coverage: Dict[str, int]
    selected_person: Dict[str, str]


class ACEInsights(BaseModel):
    """Insights generated by ACE reflection phase"""
    timestamp: str
    quality_indicators: Dict[str, Any]
    performance: Dict[str, Any]
    patterns: List[Dict[str, Any]]
    suggestions: List[str]

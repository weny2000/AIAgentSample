"""Initial migration

Revision ID: cd712a173033
Revises: 
Create Date: 2025-09-30 08:43:02.939085

"""
from alembic import op
import sqlalchemy as sa
import sqlmodel.sql.sqltypes


# revision identifiers, used by Alembic.
revision = 'cd712a173033'
down_revision = None
branch_labels = None
depends_on = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('access_control',
    sa.Column('id', sa.Uuid(), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.Column('updated_at', sa.DateTime(), nullable=True),
    sa.Column('created_by', sa.Uuid(), nullable=True),
    sa.Column('updated_by', sa.Uuid(), nullable=True),
    sa.Column('resource_id', sa.Uuid(), nullable=False),
    sa.Column('resource_type', sa.Enum('KNOWLEDGE_SOURCE', 'KNOWLEDGE_SET', 'TRAINING_PLAN', 'QUESTION', name='resourcetype'), nullable=False),
    sa.Column('principal_id', sa.Uuid(), nullable=False),
    sa.Column('principal_type', sa.Enum('USER', 'GROUP', name='principaltype'), nullable=False),
    sa.Column('permission_level', sa.Enum('VIEWER', 'EDITOR', 'OWNER', name='permissionlevel'), nullable=False),
    sa.Column('granted_by', sa.Uuid(), nullable=False),
    sa.Column('granted_at', sa.DateTime(), nullable=False),
    sa.Column('expires_at', sa.DateTime(), nullable=True),
    sa.Column('is_active', sa.Boolean(), nullable=False),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('knowledge_sets',
    sa.Column('id', sa.Uuid(), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.Column('updated_at', sa.DateTime(), nullable=True),
    sa.Column('created_by', sa.Uuid(), nullable=True),
    sa.Column('updated_by', sa.Uuid(), nullable=True),
    sa.Column('name', sqlmodel.sql.sqltypes.AutoString(length=200), nullable=False),
    sa.Column('description', sqlmodel.sql.sqltypes.AutoString(length=1000), nullable=True),
    sa.Column('creator_user_id', sa.Uuid(), nullable=False),
    sa.Column('sharing_level', sqlmodel.sql.sqltypes.AutoString(length=50), nullable=False),
    sa.Column('source_version_ids', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('snapshot_ids', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('tags', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('is_active', sa.Boolean(), nullable=False),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('knowledge_sources',
    sa.Column('id', sa.Uuid(), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.Column('updated_at', sa.DateTime(), nullable=True),
    sa.Column('created_by', sa.Uuid(), nullable=True),
    sa.Column('updated_by', sa.Uuid(), nullable=True),
    sa.Column('title', sqlmodel.sql.sqltypes.AutoString(length=500), nullable=False),
    sa.Column('description', sqlmodel.sql.sqltypes.AutoString(length=2000), nullable=True),
    sa.Column('source_type', sa.Enum('USER_UPLOAD', 'EXTERNAL_SYNC', name='sourcetype'), nullable=False),
    sa.Column('original_filename', sqlmodel.sql.sqltypes.AutoString(length=255), nullable=True),
    sa.Column('author', sqlmodel.sql.sqltypes.AutoString(length=200), nullable=True),
    sa.Column('creator_user_id', sa.Uuid(), nullable=False),
    sa.Column('language', sqlmodel.sql.sqltypes.AutoString(length=10), nullable=True),
    sa.Column('tags', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('is_active', sa.Boolean(), nullable=False),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('permission_audit_logs',
    sa.Column('id', sa.Uuid(), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.Column('updated_at', sa.DateTime(), nullable=True),
    sa.Column('created_by', sa.Uuid(), nullable=True),
    sa.Column('updated_by', sa.Uuid(), nullable=True),
    sa.Column('timestamp', sa.DateTime(), nullable=False),
    sa.Column('actor_user_id', sa.Uuid(), nullable=False),
    sa.Column('action', sa.Enum('GRANT', 'REVOKE', name='permissionaction'), nullable=False),
    sa.Column('resource_id', sa.Uuid(), nullable=False),
    sa.Column('resource_type', sa.Enum('KNOWLEDGE_SOURCE', 'KNOWLEDGE_SET', 'TRAINING_PLAN', 'QUESTION', name='resourcetype'), nullable=False),
    sa.Column('principal_id', sa.Uuid(), nullable=False),
    sa.Column('principal_type', sa.Enum('USER', 'GROUP', name='principaltype'), nullable=False),
    sa.Column('permission_level', sa.Enum('VIEWER', 'EDITOR', 'OWNER', name='permissionlevel'), nullable=False),
    sa.Column('reason', sqlmodel.sql.sqltypes.AutoString(length=500), nullable=True),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('questions',
    sa.Column('id', sa.Uuid(), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.Column('updated_at', sa.DateTime(), nullable=True),
    sa.Column('created_by', sa.Uuid(), nullable=True),
    sa.Column('updated_by', sa.Uuid(), nullable=True),
    sa.Column('title', sqlmodel.sql.sqltypes.AutoString(length=500), nullable=False),
    sa.Column('description', sqlmodel.sql.sqltypes.AutoString(length=1000), nullable=True),
    sa.Column('creator_user_id', sa.Uuid(), nullable=False),
    sa.Column('category', sqlmodel.sql.sqltypes.AutoString(length=100), nullable=True),
    sa.Column('tags', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('is_active', sa.Boolean(), nullable=False),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('sync_snapshots',
    sa.Column('id', sa.Uuid(), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.Column('updated_at', sa.DateTime(), nullable=True),
    sa.Column('created_by', sa.Uuid(), nullable=True),
    sa.Column('updated_by', sa.Uuid(), nullable=True),
    sa.Column('external_source_url', sqlmodel.sql.sqltypes.AutoString(length=1000), nullable=False),
    sa.Column('external_source_id', sqlmodel.sql.sqltypes.AutoString(length=255), nullable=True),
    sa.Column('snapshot_timestamp', sa.DateTime(), nullable=False),
    sa.Column('content_hash', sqlmodel.sql.sqltypes.AutoString(length=128), nullable=False),
    sa.Column('object_storage_key', sqlmodel.sql.sqltypes.AutoString(length=500), nullable=False),
    sa.Column('file_size', sa.Integer(), nullable=True),
    sa.Column('sync_metadata', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('status', sa.Enum('DRAFT', 'PENDING_REVIEW', 'APPROVED', 'DEPRECATED', 'DELETED', name='sourcestatus'), nullable=False),
    sa.Column('processing_status', sqlmodel.sql.sqltypes.AutoString(length=50), nullable=True),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('teams',
    sa.Column('id', sa.Uuid(), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.Column('updated_at', sa.DateTime(), nullable=True),
    sa.Column('created_by', sa.Uuid(), nullable=True),
    sa.Column('updated_by', sa.Uuid(), nullable=True),
    sa.Column('name', sqlmodel.sql.sqltypes.AutoString(length=200), nullable=False),
    sa.Column('description', sqlmodel.sql.sqltypes.AutoString(length=1000), nullable=True),
    sa.Column('parent_team_id', sa.Uuid(), nullable=True),
    sa.ForeignKeyConstraint(['parent_team_id'], ['teams.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('training_plans',
    sa.Column('id', sa.Uuid(), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.Column('updated_at', sa.DateTime(), nullable=True),
    sa.Column('created_by', sa.Uuid(), nullable=True),
    sa.Column('updated_by', sa.Uuid(), nullable=True),
    sa.Column('name', sqlmodel.sql.sqltypes.AutoString(length=300), nullable=False),
    sa.Column('description', sqlmodel.sql.sqltypes.AutoString(length=2000), nullable=True),
    sa.Column('creator_user_id', sa.Uuid(), nullable=False),
    sa.Column('category', sqlmodel.sql.sqltypes.AutoString(length=100), nullable=True),
    sa.Column('tags', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('is_active', sa.Boolean(), nullable=False),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('user_groups',
    sa.Column('id', sa.Uuid(), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.Column('updated_at', sa.DateTime(), nullable=True),
    sa.Column('created_by', sa.Uuid(), nullable=True),
    sa.Column('updated_by', sa.Uuid(), nullable=True),
    sa.Column('name', sqlmodel.sql.sqltypes.AutoString(length=200), nullable=False),
    sa.Column('description', sqlmodel.sql.sqltypes.AutoString(length=1000), nullable=True),
    sa.Column('is_active', sa.Boolean(), nullable=False),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('question_versions',
    sa.Column('id', sa.Uuid(), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.Column('updated_at', sa.DateTime(), nullable=True),
    sa.Column('created_by', sa.Uuid(), nullable=True),
    sa.Column('updated_by', sa.Uuid(), nullable=True),
    sa.Column('logical_question_id', sa.Uuid(), nullable=False),
    sa.Column('version_number', sqlmodel.sql.sqltypes.AutoString(length=50), nullable=False),
    sa.Column('is_latest_approved', sa.Boolean(), nullable=False),
    sa.Column('question_text', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('question_type', sa.Enum('MULTIPLE_CHOICE', 'TRUE_FALSE', 'SHORT_ANSWER', 'ESSAY', 'PRACTICAL', name='questiontype'), nullable=False),
    sa.Column('options', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('correct_answer', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('scoring_rubric', sqlmodel.sql.sqltypes.AutoString(length=2000), nullable=True),
    sa.Column('scoring_prompt', sqlmodel.sql.sqltypes.AutoString(length=1000), nullable=True),
    sa.Column('source_version_ids', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('snapshot_ids', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('difficulty_level', sa.Enum('BEGINNER', 'INTERMEDIATE', 'ADVANCED', 'EXPERT', name='difficultylevel'), nullable=True),
    sa.Column('estimated_time_minutes', sa.Integer(), nullable=True),
    sa.Column('points', sa.Integer(), nullable=True),
    sa.Column('status', sa.Enum('DRAFT', 'PENDING_REVIEW', 'APPROVED', 'DEPRECATED', 'DELETED', name='questionstatus'), nullable=False),
    sa.Column('approved_by', sa.Uuid(), nullable=True),
    sa.Column('approved_at', sa.DateTime(), nullable=True),
    sa.Column('change_notes', sqlmodel.sql.sqltypes.AutoString(length=1000), nullable=True),
    sa.ForeignKeyConstraint(['logical_question_id'], ['questions.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('source_versions',
    sa.Column('id', sa.Uuid(), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.Column('updated_at', sa.DateTime(), nullable=True),
    sa.Column('created_by', sa.Uuid(), nullable=True),
    sa.Column('updated_by', sa.Uuid(), nullable=True),
    sa.Column('logical_source_id', sa.Uuid(), nullable=False),
    sa.Column('version_number', sqlmodel.sql.sqltypes.AutoString(length=50), nullable=False),
    sa.Column('is_latest', sa.Boolean(), nullable=False),
    sa.Column('object_storage_key', sqlmodel.sql.sqltypes.AutoString(length=500), nullable=False),
    sa.Column('file_size', sa.Integer(), nullable=True),
    sa.Column('content_hash', sqlmodel.sql.sqltypes.AutoString(length=128), nullable=False),
    sa.Column('mime_type', sqlmodel.sql.sqltypes.AutoString(length=100), nullable=True),
    sa.Column('status', sa.Enum('DRAFT', 'PENDING_REVIEW', 'APPROVED', 'DEPRECATED', 'DELETED', name='sourcestatus'), nullable=False),
    sa.Column('processing_status', sqlmodel.sql.sqltypes.AutoString(length=50), nullable=True),
    sa.Column('change_notes', sqlmodel.sql.sqltypes.AutoString(length=1000), nullable=True),
    sa.Column('approved_by', sa.Uuid(), nullable=True),
    sa.Column('approved_at', sa.DateTime(), nullable=True),
    sa.ForeignKeyConstraint(['logical_source_id'], ['knowledge_sources.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('training_plan_versions',
    sa.Column('id', sa.Uuid(), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.Column('updated_at', sa.DateTime(), nullable=True),
    sa.Column('created_by', sa.Uuid(), nullable=True),
    sa.Column('updated_by', sa.Uuid(), nullable=True),
    sa.Column('logical_plan_id', sa.Uuid(), nullable=False),
    sa.Column('version_number', sqlmodel.sql.sqltypes.AutoString(length=50), nullable=False),
    sa.Column('is_latest_approved', sa.Boolean(), nullable=False),
    sa.Column('question_version_ids', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('deadline_rules', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('completion_criteria', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('estimated_duration_minutes', sa.Integer(), nullable=True),
    sa.Column('max_attempts', sa.Integer(), nullable=True),
    sa.Column('passing_score', sa.Float(), nullable=True),
    sa.Column('status', sa.Enum('DRAFT', 'PENDING_REVIEW', 'APPROVED', 'DEPRECATED', 'DELETED', name='questionstatus'), nullable=False),
    sa.Column('approved_by', sa.Uuid(), nullable=True),
    sa.Column('approved_at', sa.DateTime(), nullable=True),
    sa.Column('change_notes', sqlmodel.sql.sqltypes.AutoString(length=1000), nullable=True),
    sa.ForeignKeyConstraint(['logical_plan_id'], ['training_plans.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('users',
    sa.Column('id', sa.Uuid(), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.Column('updated_at', sa.DateTime(), nullable=True),
    sa.Column('created_by', sa.Uuid(), nullable=True),
    sa.Column('updated_by', sa.Uuid(), nullable=True),
    sa.Column('username', sqlmodel.sql.sqltypes.AutoString(length=100), nullable=False),
    sa.Column('email', sqlmodel.sql.sqltypes.AutoString(length=200), nullable=False),
    sa.Column('full_name', sqlmodel.sql.sqltypes.AutoString(length=200), nullable=False),
    sa.Column('role', sa.Enum('ADMIN', 'TEAM_ADMIN', 'USER', name='systemrole'), nullable=False),
    sa.Column('team_id', sa.Uuid(), nullable=True),
    sa.Column('is_active', sa.Boolean(), nullable=False),
    sa.Column('password_hash', sqlmodel.sql.sqltypes.AutoString(length=255), nullable=True),
    sa.ForeignKeyConstraint(['team_id'], ['teams.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_users_email'), 'users', ['email'], unique=True)
    op.create_index(op.f('ix_users_username'), 'users', ['username'], unique=True)
    op.create_table('conversation_history',
    sa.Column('id', sa.Uuid(), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.Column('updated_at', sa.DateTime(), nullable=True),
    sa.Column('created_by', sa.Uuid(), nullable=True),
    sa.Column('updated_by', sa.Uuid(), nullable=True),
    sa.Column('user_id', sa.Uuid(), nullable=False),
    sa.Column('title', sqlmodel.sql.sqltypes.AutoString(length=500), nullable=False),
    sa.Column('start_time', sa.DateTime(), nullable=False),
    sa.Column('last_activity_time', sa.DateTime(), nullable=False),
    sa.Column('context_data', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('status', sa.Enum('ACTIVE', 'ARCHIVED', 'DELETED', name='conversationstatus'), nullable=False),
    sa.Column('message_count', sa.Integer(), nullable=False),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('group_memberships',
    sa.Column('id', sa.Uuid(), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.Column('updated_at', sa.DateTime(), nullable=True),
    sa.Column('created_by', sa.Uuid(), nullable=True),
    sa.Column('updated_by', sa.Uuid(), nullable=True),
    sa.Column('user_id', sa.Uuid(), nullable=False),
    sa.Column('group_id', sa.Uuid(), nullable=False),
    sa.Column('joined_at', sa.DateTime(), nullable=False),
    sa.Column('is_active', sa.Boolean(), nullable=False),
    sa.ForeignKeyConstraint(['group_id'], ['user_groups.id'], ),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('knowledge_chunks',
    sa.Column('id', sa.Uuid(), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.Column('updated_at', sa.DateTime(), nullable=True),
    sa.Column('created_by', sa.Uuid(), nullable=True),
    sa.Column('updated_by', sa.Uuid(), nullable=True),
    sa.Column('logical_source_id', sa.Uuid(), nullable=True),
    sa.Column('source_version_id', sa.Uuid(), nullable=True),
    sa.Column('sync_snapshot_id', sa.Uuid(), nullable=True),
    sa.Column('content', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('content_hash', sqlmodel.sql.sqltypes.AutoString(length=128), nullable=False),
    sa.Column('chunk_index', sa.Integer(), nullable=False),
    sa.Column('chunk_size', sa.Integer(), nullable=False),
    sa.Column('embedding_vector', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('embedding_model', sqlmodel.sql.sqltypes.AutoString(length=100), nullable=True),
    sa.Column('page_number', sa.Integer(), nullable=True),
    sa.Column('section_title', sqlmodel.sql.sqltypes.AutoString(length=500), nullable=True),
    sa.ForeignKeyConstraint(['logical_source_id'], ['knowledge_sources.id'], ),
    sa.ForeignKeyConstraint(['source_version_id'], ['source_versions.id'], ),
    sa.ForeignKeyConstraint(['sync_snapshot_id'], ['sync_snapshots.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('plan_assignments',
    sa.Column('id', sa.Uuid(), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.Column('updated_at', sa.DateTime(), nullable=True),
    sa.Column('created_by', sa.Uuid(), nullable=True),
    sa.Column('updated_by', sa.Uuid(), nullable=True),
    sa.Column('logical_plan_id', sa.Uuid(), nullable=False),
    sa.Column('plan_version_id', sa.Uuid(), nullable=False),
    sa.Column('user_group_id', sa.Uuid(), nullable=False),
    sa.Column('assigned_by', sa.Uuid(), nullable=False),
    sa.Column('assigned_at', sa.DateTime(), nullable=False),
    sa.Column('due_date', sa.DateTime(), nullable=True),
    sa.Column('auto_start', sa.Boolean(), nullable=False),
    sa.Column('is_active', sa.Boolean(), nullable=False),
    sa.Column('send_notifications', sa.Boolean(), nullable=False),
    sa.Column('reminder_settings', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.ForeignKeyConstraint(['logical_plan_id'], ['training_plans.id'], ),
    sa.ForeignKeyConstraint(['plan_version_id'], ['training_plan_versions.id'], ),
    sa.ForeignKeyConstraint(['user_group_id'], ['user_groups.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('user_feedback',
    sa.Column('id', sa.Uuid(), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.Column('updated_at', sa.DateTime(), nullable=True),
    sa.Column('created_by', sa.Uuid(), nullable=True),
    sa.Column('updated_by', sa.Uuid(), nullable=True),
    sa.Column('user_id', sa.Uuid(), nullable=False),
    sa.Column('target_type', sqlmodel.sql.sqltypes.AutoString(length=50), nullable=False),
    sa.Column('target_id', sa.Uuid(), nullable=False),
    sa.Column('rating', sa.Integer(), nullable=True),
    sa.Column('feedback_text', sqlmodel.sql.sqltypes.AutoString(length=2000), nullable=True),
    sa.Column('feedback_type', sqlmodel.sql.sqltypes.AutoString(length=50), nullable=False),
    sa.Column('is_positive', sa.Boolean(), nullable=True),
    sa.Column('context_data', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('conversation_messages',
    sa.Column('id', sa.Uuid(), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.Column('updated_at', sa.DateTime(), nullable=True),
    sa.Column('created_by', sa.Uuid(), nullable=True),
    sa.Column('updated_by', sa.Uuid(), nullable=True),
    sa.Column('conversation_id', sa.Uuid(), nullable=False),
    sa.Column('sender', sa.Enum('USER', 'AI', name='messagesender'), nullable=False),
    sa.Column('content', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('timestamp', sa.DateTime(), nullable=False),
    sa.Column('source_citations', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('token_count', sa.Integer(), nullable=True),
    sa.Column('model_used', sqlmodel.sql.sqltypes.AutoString(length=100), nullable=True),
    sa.Column('processing_time_ms', sa.Integer(), nullable=True),
    sa.Column('is_system_message', sa.Boolean(), nullable=False),
    sa.Column('is_edited', sa.Boolean(), nullable=False),
    sa.Column('message_metadata', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.ForeignKeyConstraint(['conversation_id'], ['conversation_history.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('user_tasks',
    sa.Column('id', sa.Uuid(), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.Column('updated_at', sa.DateTime(), nullable=True),
    sa.Column('created_by', sa.Uuid(), nullable=True),
    sa.Column('updated_by', sa.Uuid(), nullable=True),
    sa.Column('user_id', sa.Uuid(), nullable=False),
    sa.Column('plan_assignment_id', sa.Uuid(), nullable=True),
    sa.Column('title', sqlmodel.sql.sqltypes.AutoString(length=500), nullable=False),
    sa.Column('description', sqlmodel.sql.sqltypes.AutoString(length=1000), nullable=True),
    sa.Column('status', sa.Enum('WAITING', 'IN_PROGRESS', 'COMPLETED', 'OVERDUE', 'GENERATING', 'CANCELLED', name='taskstatus'), nullable=False),
    sa.Column('assigned_at', sa.DateTime(), nullable=False),
    sa.Column('started_at', sa.DateTime(), nullable=True),
    sa.Column('completed_at', sa.DateTime(), nullable=True),
    sa.Column('due_date', sa.DateTime(), nullable=True),
    sa.Column('question_list', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('progress_details', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('total_score', sa.Float(), nullable=True),
    sa.Column('max_possible_score', sa.Float(), nullable=True),
    sa.Column('passing_score', sa.Float(), nullable=True),
    sa.Column('attempt_number', sa.Integer(), nullable=False),
    sa.Column('max_attempts', sa.Integer(), nullable=True),
    sa.ForeignKeyConstraint(['plan_assignment_id'], ['plan_assignments.id'], ),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('user_answers',
    sa.Column('id', sa.Uuid(), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.Column('updated_at', sa.DateTime(), nullable=True),
    sa.Column('created_by', sa.Uuid(), nullable=True),
    sa.Column('updated_by', sa.Uuid(), nullable=True),
    sa.Column('user_id', sa.Uuid(), nullable=False),
    sa.Column('user_task_id', sa.Uuid(), nullable=False),
    sa.Column('question_version_id', sa.Uuid(), nullable=False),
    sa.Column('user_answer', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('score', sa.Float(), nullable=True),
    sa.Column('max_score', sa.Float(), nullable=True),
    sa.Column('is_correct', sa.Boolean(), nullable=True),
    sa.Column('ai_feedback', sqlmodel.sql.sqltypes.AutoString(length=2000), nullable=True),
    sa.Column('ai_score_confidence', sa.Float(), nullable=True),
    sa.Column('submitted_at', sa.DateTime(), nullable=False),
    sa.Column('time_spent_seconds', sa.Integer(), nullable=True),
    sa.Column('attempt_number', sa.Integer(), nullable=False),
    sa.Column('requires_manual_review', sa.Boolean(), nullable=False),
    sa.Column('reviewed_by', sa.Uuid(), nullable=True),
    sa.Column('reviewed_at', sa.DateTime(), nullable=True),
    sa.Column('manual_feedback', sqlmodel.sql.sqltypes.AutoString(length=2000), nullable=True),
    sa.ForeignKeyConstraint(['question_version_id'], ['question_versions.id'], ),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ),
    sa.ForeignKeyConstraint(['user_task_id'], ['user_tasks.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table('user_answers')
    op.drop_table('user_tasks')
    op.drop_table('conversation_messages')
    op.drop_table('user_feedback')
    op.drop_table('plan_assignments')
    op.drop_table('knowledge_chunks')
    op.drop_table('group_memberships')
    op.drop_table('conversation_history')
    op.drop_index(op.f('ix_users_username'), table_name='users')
    op.drop_index(op.f('ix_users_email'), table_name='users')
    op.drop_table('users')
    op.drop_table('training_plan_versions')
    op.drop_table('source_versions')
    op.drop_table('question_versions')
    op.drop_table('user_groups')
    op.drop_table('training_plans')
    op.drop_table('teams')
    op.drop_table('sync_snapshots')
    op.drop_table('questions')
    op.drop_table('permission_audit_logs')
    op.drop_table('knowledge_sources')
    op.drop_table('knowledge_sets')
    op.drop_table('access_control')
    # ### end Alembic commands ###